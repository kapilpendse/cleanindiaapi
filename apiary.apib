FORMAT: 1A

# Clean India API
A common denominator API for *Clean India*. This spec defines the interface for front ends (app, mobile web, web) to communicate with backend.

# Group Spotfixes
Resources related to spot fixes

## Find nearby spotfixes [/spotfix/list{?latitude,longitude,max_results}]
List of spotfixes is represented in the geojson format which is easy to feed into mapping API like Google Maps.

+ Parameters
    + latitude (required, number, `24.9929619`) ... `latitude` of location around which to search.
    + longitude (required, number, `121.4477716`) ... `longitude` of location around which to search.
    + max_results (optional, number, `25`) ... Maximum number of spotfixes to be fetched. If not specified, maximum 25 spotfixes are returned by default.

### Find nearby spotfixes [GET]
+ Response 200 (application/vnd.geo+json)

        {
            "features": [
                {
                    "type": "Feature",
                    "properties": {
                        "id": "542c44b3e4b02bea59225b3d",
                        "where": "Test",
                        "description": "Test desc",
                        "date": "01/01/2015 12:00",
                        "photos": [
                            "542c44b2e4b02bea59225b32"
                        ],
                        "plannedby": {
                            "id": "542c42e9e4b02bea59225b2d",
                            "name": "dravid"
                        },
                        "participants": [
                            {
                                "id": "542c42e9e4b02bea59225b2d",
                                "name": "dravid"
                            }
                        ]
                    },
                    "geometry": {
                        "type": "Point",
                        "coordinates": [
                            121.45557969029645,
                            25.00558830953123
                        ]
                    }
                },
                {
                    "type": "Feature",
                    "properties": {
                        "id": "542c43a3e4b02bea59225b30",
                        "where": "Nanya night market entrance",
                        "description": "Broken footpath to be fixed and some benches to be installed",
                        "date": "02/10/2014 12:00",
                        "photos": [
                            "542c43a2e4b02bea59225b2e",
                            "543df5fae4b0abdd3f1e5a8a"
                        ],
                        "plannedby": {
                            "id": "542c42e9e4b02bea59225b2d",
                            "name": "dravid"
                        },
                        "participants": [
                            {
                                "id": "542c42e9e4b02bea59225b2d",
                                "name": "dravid"
                            },
                            {
                                "id": "543f7a2ce4b0ed5022cb9459",
                                "name": "test"
                            }
                        ]
                    },
                    "geometry": {
                        "type": "Point",
                        "coordinates": [
                            121.45534279999998,
                            25.005558
                        ]
                    }
                }
            ],
            "type": "FeatureCollection"
        }

## New spotfix [/spotfix/new{?where,description,date,latitude,longitude,photo_id}]
Create a new spotfix by providing at least 1 photo of the spot BEFORE it is fixed.

+ Parameters
    + where (required, text, `Near Saras Baug entrance`) ... A short description of the location.
    + description (required, text, `Fix broken sidewalk and install a dustbin`) ... Description of what is to be done.
    + date (required, date, `dd/mm/yyyy hh:mm`) ... Date and time when the spot will be fixed.
    + latitude (required, number, `24.9929619`) ... `latitude` of the location.
    + longitude (required, number, `121.4477716`) ... `longitude` of the location.
    + photo_id (required, text, `542c44b2e4b02bea59225b32`) ... ID of an uploaded photo of the spot taken BEFORE the fix. This photo is automatically tagged as BEFORE.

### Create a new spotfix [POST]
+ Response 200 (application/json)

    + Body

            { "result": "ok", "id": "543f7a2ce4b0ed5022cb9459" }


## Upload a photo [/spotfix/photo/upload{?photo}]
Upload a new photo of spotfix

+ Parameters
    + photo (required, blob) ... The photo blob. Image formats accepted: PNG, JPEG.

### Upload a photo [POST]
+ Response 200 (application/json)

    + Body

            { "result": "ok", "photo_id": "543f7a2ce4b0ed5022cb9459" }

## Download a photo [/spotfix/photo/download{?photo_id}]
Download a photo of spotfix by photo ID

+ Parameters
    + photo_id (required, text, `543f7a2ce4b0ed5022cb9459`) ... ID of the photo.

### Download a photo [GET]
+ Response 200 (image/jpeg)

    + Body

            The JPEG image data.

+ Response 200 (image/png)

    + Body

            The PNG image data.

## Cancel a spotfix [/spotfix/cancel{?id,reason}]
Cancel a planned spotfix

+ Parameters
    + id (required, text, `543f7a2ce4b0ed5022cb9459`) ... `id` of the spotfix to be cancelled.
    + reason (required, text, `Insufficient people`) ... `reason` for cancellation.

### Cancel a planned spotfix by giving a reason [POST]
+ Response 200 (application/json)

    + Body

            { "result": "ok" }

## Join a spotfix [/spotfix/join{?id}]
Join a spotfix as a volunteer

+ Parameters
    + id (required, text, `543f7a2ce4b0ed5022cb9459`) ... `id` of the spotfix to join.

### Join a spotfix [POST]
+ Response 200 (application/json)

    + Body

            { "result": "ok" }

## Leave a spotfix [/spotfix/leave{?id}]
Leave a spotfix which one has volunteered for

+ Parameters
    + id (required, text, `543f7a2ce4b0ed5022cb9459`) ... `id` of the spotfix to leave.

### Leave a spotfix [POST]
+ Response 200 (application/json)

    + Body

            { "result": "ok" }

## Add photo to a spotfix [/spotfix/photo/add{?id,photo_id,tag}]
Add photo to a spotfix with a tag like BEFORE, AFTER, DURING, SIDE_BY_SIDE and so on

+ Parameters
    + id (required, text, `543f7a2ce4b0ed5022cb9459`) ... `id` of the spotfix to add photo to.
    + photo_id (required, text, `543f7a2ce4b0ed5022cb9459`) ... `id` of the uploaded photo.
    + tag (required, text, `BEFORE`) ... Tag for the photo. One of these: BEFORE, AFTER, DURING, SIDE_BY_SIDE

### Add photo to a spotfix [POST]
+ Response 200 (application/json)

    + Body

            { "result": "ok" }

